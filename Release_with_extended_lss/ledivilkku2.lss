
ledivilkku2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800106  00800106  00000438  2**0
                  ALLOC
  3 .stab         00000c48  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f8  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_default>

000000a6 <disableWDT>:
//#include <util/delay.h>
#include "pinMacros.h"
#include "init.h"

void disableWDT(){
	wdt_disable(); //Mostly for debugging...
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	80 93 60 00 	sts	0x0060, r24
  b0:	10 92 60 00 	sts	0x0060, r1
  b4:	0f be       	out	0x3f, r0	; 63
}
  b6:	08 95       	ret

000000b8 <initPorts>:
	//DDRB = 0x00; //Should be this way after reset, but to make sure...

	//TODO: Move these over to the respective modules...

	//Set BLANK high (it doubles as !SS pin, thus it has to be an output to stay in master SPI mode)...
	DDRB |= (1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB5);
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8e 62       	ori	r24, 0x2E	; 46
  bc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB2);
  be:	2a 9a       	sbi	0x05, 2	; 5


	//DDRC = 0x00;

	//DDRD = 0x00;
	DDRD |= (1<<PD2)|(1<<PD3)|(1<<PD4); //PD4 = debug led...
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8c 61       	ori	r24, 0x1C	; 28
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD3); //Put only VPRG to high on init...
  c6:	5b 9a       	sbi	0x0b, 3	; 11

}
  c8:	08 95       	ret

000000ca <initSPI>:

void initSPI(){

	/* Set MOSI, !SS and SCK output*/
	DDRB |= (1<<PB2)|(1<<PB3)|(1<<PB5);
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	8c 62       	ori	r24, 0x2C	; 44
  ce:	84 b9       	out	0x04, r24	; 4

	SPCR |=
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 6d       	ori	r24, 0xD0	; 208
  d4:	8c bd       	out	0x2c, r24	; 44
	(1<<SPIE) | //We want interrupts
	(1<<SPE) | 	//We want the SPI enabled
	(1<<MSTR); //We want the atmega to be a master

	SPSR |= (1<<SPI2X) ; //Doubles the speed of the SPI clock
  d6:	8d b5       	in	r24, 0x2d	; 45
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8d bd       	out	0x2d, r24	; 45

}
  dc:	08 95       	ret

000000de <initBLANKTimer>:

//Initialize BLANK Timer Timer0
void initBLANKTimer(){
	//CTC with OCRA as TOP
	TCCR0A = (1 << WGM01);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	84 bd       	out	0x24, r24	; 36
	//Generate interrupt every 3x1024 (4096) clock cycles
	OCR0A = 3;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	87 bd       	out	0x27, r24	; 39
	// Enable Timer Compare match A interrupt
	TIMSK0 |= (1 << OCIE0A);
  e6:	ee e6       	ldi	r30, 0x6E	; 110
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	//clk_io/1024 timer ON!
	TCCR0B |= (1 << CS02) | (1 << CS00);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	85 bd       	out	0x25, r24	; 37
}
  f6:	08 95       	ret

000000f8 <initUSART>:

void initUSART(){

	uint16_t ubrr = 103; //(F_CPU/(16UL*BAUD_RATE))-1;

	DDRD |= (1<<PD1);
  f8:	51 9a       	sbi	0x0a, 1	; 10
	// disable all interrupts before configuration
	//cli();

	// USART0 Baud Rate Register
	// set clock divider
	UBRR0H = (uint8_t)(ubrr >> 8);
  fa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)ubrr;
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	80 93 c4 00 	sts	0x00C4, r24

    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 104:	e2 ec       	ldi	r30, 0xC2	; 194
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
    //enable transmitter
    UCSR0B |= (1<<TXEN0);
 10e:	e1 ec       	ldi	r30, 0xC1	; 193
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 60       	ori	r24, 0x08	; 8
 116:	80 83       	st	Z, r24

}
 118:	08 95       	ret

0000011a <clearArray>:
	}

	return 0;
}

void clearArray(volatile uint8_t *arr, uint8_t len) {
 11a:	48 2f       	mov	r20, r24

	//pin_toggle(DEBUG_LED);
	for (uint8_t r = 0; r < len; r++) {
 11c:	66 23       	and	r22, r22
 11e:	39 f0       	breq	.+14     	; 0x12e <clearArray+0x14>
 120:	9c 01       	movw	r18, r24
 122:	f9 01       	movw	r30, r18
		arr[r] = 0x00;
 124:	11 92       	st	Z+, r1
}

void clearArray(volatile uint8_t *arr, uint8_t len) {

	//pin_toggle(DEBUG_LED);
	for (uint8_t r = 0; r < len; r++) {
 126:	8e 2f       	mov	r24, r30
 128:	84 1b       	sub	r24, r20
 12a:	86 17       	cp	r24, r22
 12c:	d8 f3       	brcs	.-10     	; 0x124 <clearArray+0xa>
 12e:	08 95       	ret

00000130 <USART_Transmit>:

}

//Send byte via USART
void USART_Transmit(uint8_t data)
{
 130:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer*/
	while( !( UCSR0A & (1<<UDRE0)) );
 132:	80 91 c0 00 	lds	r24, 0x00C0
 136:	85 ff       	sbrs	r24, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <USART_Transmit+0x2>
	UDR0 = data;
 13a:	90 93 c6 00 	sts	0x00C6, r25
	/* Put data into buffer, sends the data*/

}
 13e:	08 95       	ret

00000140 <__vector_default>:



//If an interrupt happens and there isn't an interrupt handler, we go here!
ISR(BADISR_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1

	pin_high(DEBUG_LED); //Give us an indication about an error condition...
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__vector_default+0xc>

0000014e <main>:
//volatile uint8_t sendData=0;
//volatile uint8_t i=0;

int main() {

	cli();
 14e:	f8 94       	cli

	disableWDT();
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <disableWDT>
	initPorts();
 154:	0e 94 5c 00 	call	0xb8	; 0xb8 <initPorts>
	initSPI();
 158:	0e 94 65 00 	call	0xca	; 0xca <initSPI>

	initTLC5940();
 15c:	0e 94 ac 01 	call	0x358	; 0x358 <initTLC5940>
	initBLANKTimer();
 160:	0e 94 6f 00 	call	0xde	; 0xde <initBLANKTimer>

	initUSART();
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <initUSART>
	sei();
 168:	78 94       	sei

	InitGScycle(); //TODO: Send first byte to the SPI bus...
 16a:	0e 94 13 01 	call	0x226	; 0x226 <InitGScycle>
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	31 e0       	ldi	r19, 0x01	; 1
					apu=1; //we need to reset the helper
				}


				if(apu==1){ //Odd
					BackBuffer[i-1]=0xff;
 172:	4f ef       	ldi	r20, 0xFF	; 255
					BackBuffer[i]=0xf0;
 174:	a0 ef       	ldi	r26, 0xF0	; 240
				}else{//even
					BackBuffer[i-1]=0x0f;
 176:	5f e0       	ldi	r21, 0x0F	; 15
	uint8_t i = 1;
	uint8_t apu = 1; //we need this in order to determine if the non-skipped number is odd
	while(1){

		// Clear backbuffer once every frame...
		if (isAfterFlip) {
 178:	80 91 3b 01 	lds	r24, 0x013B
 17c:	88 23       	and	r24, r24
 17e:	e1 f3       	breq	.-8      	; 0x178 <main+0x2a>
			clearArray(BackBuffer, 24*TLC5940);
 180:	e0 91 02 01 	lds	r30, 0x0102
 184:	f0 91 03 01 	lds	r31, 0x0103
 188:	cf 01       	movw	r24, r30
 18a:	48 96       	adiw	r24, 0x18	; 24

void clearArray(volatile uint8_t *arr, uint8_t len) {

	//pin_toggle(DEBUG_LED);
	for (uint8_t r = 0; r < len; r++) {
		arr[r] = 0x00;
 18c:	11 92       	st	Z+, r1
}

void clearArray(volatile uint8_t *arr, uint8_t len) {

	//pin_toggle(DEBUG_LED);
	for (uint8_t r = 0; r < len; r++) {
 18e:	e8 17       	cp	r30, r24
 190:	f9 07       	cpc	r31, r25
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x3e>

		// Clear backbuffer once every frame...
		if (isAfterFlip) {
			clearArray(BackBuffer, 24*TLC5940);

			if (i < (25*TLC5940)) {
 194:	29 31       	cpi	r18, 0x19	; 25
 196:	c8 f4       	brcc	.+50     	; 0x1ca <main+0x7c>

				if(i%3==0){ //Skip!
 198:	82 2f       	mov	r24, r18
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodqi4>
 1a0:	99 23       	and	r25, r25
 1a2:	e1 f4       	brne	.+56     	; 0x1dc <main+0x8e>
					i++;
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
					apu=1; //we need to reset the helper
				}


				if(apu==1){ //Odd
					BackBuffer[i-1]=0xff;
 1a6:	82 2f       	mov	r24, r18
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e0 91 02 01 	lds	r30, 0x0102
 1ae:	f0 91 03 01 	lds	r31, 0x0103
 1b2:	e8 0f       	add	r30, r24
 1b4:	f9 1f       	adc	r31, r25
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	40 83       	st	Z, r20
					BackBuffer[i]=0xf0;
 1ba:	e0 91 02 01 	lds	r30, 0x0102
 1be:	f0 91 03 01 	lds	r31, 0x0103
 1c2:	e8 0f       	add	r30, r24
 1c4:	f9 1f       	adc	r31, r25
 1c6:	a0 83       	st	Z, r26
 1c8:	32 e0       	ldi	r19, 0x02	; 2
				}
				apu++;

			}

			i++;
 1ca:	2f 5f       	subi	r18, 0xFF	; 255

			if(i==24*TLC5940){ //Ending cell, reset EVERYTHING
 1cc:	28 31       	cpi	r18, 0x18	; 24
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <main+0x88>
				i=1;
				apu=1;
				//clearArray(BackBuffer, 24*TLC5940);
			}
			isAfterFlip = 0;
 1d0:	10 92 3b 01 	sts	0x013B, r1
 1d4:	d1 cf       	rjmp	.-94     	; 0x178 <main+0x2a>

			}

			i++;

			if(i==24*TLC5940){ //Ending cell, reset EVERYTHING
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	fa cf       	rjmp	.-12     	; 0x1d0 <main+0x82>
					i++;
					apu=1; //we need to reset the helper
				}


				if(apu==1){ //Odd
 1dc:	31 30       	cpi	r19, 0x01	; 1
 1de:	19 f3       	breq	.-58     	; 0x1a6 <main+0x58>
					BackBuffer[i-1]=0xff;
					BackBuffer[i]=0xf0;
				}else{//even
					BackBuffer[i-1]=0x0f;
 1e0:	82 2f       	mov	r24, r18
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	e0 91 02 01 	lds	r30, 0x0102
 1e8:	f0 91 03 01 	lds	r31, 0x0103
 1ec:	e8 0f       	add	r30, r24
 1ee:	f9 1f       	adc	r31, r25
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	50 83       	st	Z, r21
					BackBuffer[i]=0xff;
 1f4:	e0 91 02 01 	lds	r30, 0x0102
 1f8:	f0 91 03 01 	lds	r31, 0x0103
 1fc:	e8 0f       	add	r30, r24
 1fe:	f9 1f       	adc	r31, r25
 200:	40 83       	st	Z, r20
 202:	3f 5f       	subi	r19, 0xFF	; 255
 204:	e2 cf       	rjmp	.-60     	; 0x1ca <main+0x7c>

00000206 <DCInputCycle>:

	if(USE_EEPROM_DC_DATA){
		pin_low(DCPRG);
	}
	else{
		pin_high(DCPRG); //Dot correction register programming on
 206:	5a 9a       	sbi	0x0b, 2	; 11
		pin_high(VPRG); //Set dot correction data input mode on
 208:	5b 9a       	sbi	0x0b, 3	; 11
 20a:	8b e0       	ldi	r24, 0x0B	; 11

		//Send dot correction data to the SPI bus...
		for(DCdataCounter = 0; DCdataCounter <= DC_DATA_LENGTH; DCdataCounter++){
			/* Start transmission */
			SPDR = 0xff; //Send byte
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	9e bd       	out	0x2e, r25	; 46
			//TODO: allow usage of dot correction data array...
			/* Wait for transmission complete */
			while(!(SPSR & (1<<SPIF)));
 210:	0d b4       	in	r0, 0x2d	; 45
 212:	07 fe       	sbrs	r0, 7
 214:	fd cf       	rjmp	.-6      	; 0x210 <DCInputCycle+0xa>
 216:	81 50       	subi	r24, 0x01	; 1
 218:	d0 f7       	brcc	.-12     	; 0x20e <DCInputCycle+0x8>
	else{
		pin_high(DCPRG); //Dot correction register programming on
		pin_high(VPRG); //Set dot correction data input mode on

		//Send dot correction data to the SPI bus...
		for(DCdataCounter = 0; DCdataCounter <= DC_DATA_LENGTH; DCdataCounter++){
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	80 93 3a 01 	sts	0x013A, r24
			//TODO: allow usage of dot correction data array...
			/* Wait for transmission complete */
			while(!(SPSR & (1<<SPIF)));
		}
		//Pulse XLAT to latch sent data...
		pin_high(XLAT);
 220:	29 9a       	sbi	0x05, 1	; 5
		pin_low(XLAT);
 222:	29 98       	cbi	0x05, 1	; 5
		//TODO: Support EEPROM writing with 22V VPRG signal?

	}
}
 224:	08 95       	ret

00000226 <InitGScycle>:
 * Consecutive bytes are sent by an ISR: SPI_STC_vect
 */
void InitGScycle(){

	//Check if DC cycle was run before this...
	if(get_output(VPRG)){
 226:	5b 9b       	sbis	0x0b, 3	; 11
 228:	04 c0       	rjmp	.+8      	; 0x232 <InitGScycle+0xc>
		pin_low(VPRG);
 22a:	5b 98       	cbi	0x0b, 3	; 11
		FirstCycle = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 38 01 	sts	0x0138, r24
	}

	//TODO: TEST if this is ok!
	//TCCR0B = (1 << CS02) | (1 << CS00); //Enable timer!

	pin_low(BLANK);
 232:	2a 98       	cbi	0x05, 2	; 5

	SPDR = FrontBuffer[GSdataCounter];
 234:	80 91 39 01 	lds	r24, 0x0139
 238:	e0 91 04 01 	lds	r30, 0x0104
 23c:	f0 91 05 01 	lds	r31, 0x0105
 240:	e8 0f       	add	r30, r24
 242:	f1 1d       	adc	r31, r1
 244:	80 81       	ld	r24, Z
 246:	8e bd       	out	0x2e, r24	; 46
	//TCNT0 =0x00; //Reset timer....

}
 248:	08 95       	ret

0000024a <__vector_17>:

/*SPI transmit interrupt vector
 * SPIF is cleared when entering this interrupt vector...
 */
ISR(SPI_STC_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	if(GSdataCounter < GS_DATA_LENGHT){
 25a:	80 91 39 01 	lds	r24, 0x0139
 25e:	87 31       	cpi	r24, 0x17	; 23
 260:	50 f0       	brcs	.+20     	; 0x276 <__vector_17+0x2c>
		GSdataCounter++;
		SPDR = FrontBuffer[GSdataCounter];
	}
	else{
		GSdataCounter=0;
 262:	10 92 39 01 	sts	0x0139, r1
	}
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti
 * SPIF is cleared when entering this interrupt vector...
 */
ISR(SPI_STC_vect)
{
	if(GSdataCounter < GS_DATA_LENGHT){
		GSdataCounter++;
 276:	80 91 39 01 	lds	r24, 0x0139
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 39 01 	sts	0x0139, r24
		SPDR = FrontBuffer[GSdataCounter];
 280:	80 91 39 01 	lds	r24, 0x0139
 284:	e0 91 04 01 	lds	r30, 0x0104
 288:	f0 91 05 01 	lds	r31, 0x0105
 28c:	e8 0f       	add	r30, r24
 28e:	f1 1d       	adc	r31, r1
 290:	80 81       	ld	r24, Z
 292:	8e bd       	out	0x2e, r24	; 46
	}
	else{
		GSdataCounter=0;
	}
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_14>:
/*
 * BLANK timer interrupt Timer0
 * Interrupt if TCNT0 = OCR0A
 */
ISR(TIMER0_COMPA_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	c++;
 2ba:	80 91 06 01 	lds	r24, 0x0106
 2be:	90 91 07 01 	lds	r25, 0x0107
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 07 01 	sts	0x0107, r25
 2c8:	80 93 06 01 	sts	0x0106, r24
	pin_high(BLANK);
 2cc:	2a 9a       	sbi	0x05, 2	; 5
	pin_high(XLAT);
 2ce:	29 9a       	sbi	0x05, 1	; 5
	pin_low(XLAT);
 2d0:	29 98       	cbi	0x05, 1	; 5

	if(FirstCycle){
 2d2:	80 91 38 01 	lds	r24, 0x0138
 2d6:	88 23       	and	r24, r24
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <__vector_14+0x3e>
		pin_high(SCLK);
 2da:	2d 9a       	sbi	0x05, 5	; 5
		pin_low(SCLK);
 2dc:	2d 98       	cbi	0x05, 5	; 5
		FirstCycle = 0;
 2de:	10 92 38 01 	sts	0x0138, r1
	}

	if(c>=50){
 2e2:	80 91 06 01 	lds	r24, 0x0106
 2e6:	90 91 07 01 	lds	r25, 0x0107
 2ea:	c2 97       	sbiw	r24, 0x32	; 50
 2ec:	d8 f0       	brcs	.+54     	; 0x324 <__vector_14+0x80>

		//pin_toggle(DEBUG_LED);

		//Flip buffers...
		Midbuffer = FrontBuffer;
 2ee:	80 91 04 01 	lds	r24, 0x0104
 2f2:	90 91 05 01 	lds	r25, 0x0105
 2f6:	90 93 01 01 	sts	0x0101, r25
 2fa:	80 93 00 01 	sts	0x0100, r24
		FrontBuffer = BackBuffer;
 2fe:	20 91 02 01 	lds	r18, 0x0102
 302:	30 91 03 01 	lds	r19, 0x0103
 306:	30 93 05 01 	sts	0x0105, r19
 30a:	20 93 04 01 	sts	0x0104, r18
		BackBuffer = Midbuffer;
 30e:	90 93 03 01 	sts	0x0103, r25
 312:	80 93 02 01 	sts	0x0102, r24

		c=0;
 316:	10 92 07 01 	sts	0x0107, r1
 31a:	10 92 06 01 	sts	0x0106, r1
		isAfterFlip = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 3b 01 	sts	0x013B, r24
	}

   // Start new transfer....
	pin_low(BLANK);
 324:	2a 98       	cbi	0x05, 2	; 5

	if(isAfterFlip){
 326:	80 91 3b 01 	lds	r24, 0x013B
 32a:	88 23       	and	r24, r24
 32c:	51 f0       	breq	.+20     	; 0x342 <__vector_14+0x9e>
	SPDR = FrontBuffer[GSdataCounter];
 32e:	80 91 39 01 	lds	r24, 0x0139
 332:	e0 91 04 01 	lds	r30, 0x0104
 336:	f0 91 05 01 	lds	r31, 0x0105
 33a:	e8 0f       	add	r30, r24
 33c:	f1 1d       	adc	r31, r1
 33e:	80 81       	ld	r24, Z
 340:	8e bd       	out	0x2e, r24	; 46
	}

}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <initTLC5940>:
uint8_t DCdataCounter = 0; //Counter to index of DCdata[] array
volatile uint8_t isAfterFlip = 0;

//Sets all the signals to their expected values and initiates the dot correction cycle...
void initTLC5940(){
	pin_low(XLAT);
 358:	29 98       	cbi	0x05, 1	; 5
	pin_low(DCPRG);
 35a:	5a 98       	cbi	0x0b, 2	; 11
	pin_high(VPRG);
 35c:	5b 9a       	sbi	0x0b, 3	; 11
	pin_high(BLANK);
 35e:	2a 9a       	sbi	0x05, 2	; 5
	pin_low(SCLK);
 360:	2d 98       	cbi	0x05, 5	; 5

	if(USE_EEPROM_DC_DATA){
		pin_low(DCPRG);
	}
	else{
		pin_high(DCPRG); //Dot correction register programming on
 362:	5a 9a       	sbi	0x0b, 2	; 11
		pin_high(VPRG); //Set dot correction data input mode on
 364:	5b 9a       	sbi	0x0b, 3	; 11
 366:	8b e0       	ldi	r24, 0x0B	; 11

		//Send dot correction data to the SPI bus...
		for(DCdataCounter = 0; DCdataCounter <= DC_DATA_LENGTH; DCdataCounter++){
			/* Start transmission */
			SPDR = 0xff; //Send byte
 368:	9f ef       	ldi	r25, 0xFF	; 255
 36a:	9e bd       	out	0x2e, r25	; 46
			//TODO: allow usage of dot correction data array...
			/* Wait for transmission complete */
			while(!(SPSR & (1<<SPIF)));
 36c:	0d b4       	in	r0, 0x2d	; 45
 36e:	07 fe       	sbrs	r0, 7
 370:	fd cf       	rjmp	.-6      	; 0x36c <initTLC5940+0x14>
 372:	81 50       	subi	r24, 0x01	; 1
 374:	d0 f7       	brcc	.-12     	; 0x36a <initTLC5940+0x12>
	else{
		pin_high(DCPRG); //Dot correction register programming on
		pin_high(VPRG); //Set dot correction data input mode on

		//Send dot correction data to the SPI bus...
		for(DCdataCounter = 0; DCdataCounter <= DC_DATA_LENGTH; DCdataCounter++){
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	80 93 3a 01 	sts	0x013A, r24
			//TODO: allow usage of dot correction data array...
			/* Wait for transmission complete */
			while(!(SPSR & (1<<SPIF)));
		}
		//Pulse XLAT to latch sent data...
		pin_high(XLAT);
 37c:	29 9a       	sbi	0x05, 1	; 5
		pin_low(XLAT);
 37e:	29 98       	cbi	0x05, 1	; 5
	pin_low(DCPRG);
	pin_high(VPRG);
	pin_high(BLANK);
	pin_low(SCLK);
	DCInputCycle();
}
 380:	08 95       	ret

00000382 <__udivmodqi4>:
 382:	99 1b       	sub	r25, r25
 384:	79 e0       	ldi	r23, 0x09	; 9
 386:	04 c0       	rjmp	.+8      	; 0x390 <__udivmodqi4_ep>

00000388 <__udivmodqi4_loop>:
 388:	99 1f       	adc	r25, r25
 38a:	96 17       	cp	r25, r22
 38c:	08 f0       	brcs	.+2      	; 0x390 <__udivmodqi4_ep>
 38e:	96 1b       	sub	r25, r22

00000390 <__udivmodqi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	7a 95       	dec	r23
 394:	c9 f7       	brne	.-14     	; 0x388 <__udivmodqi4_loop>
 396:	80 95       	com	r24
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
